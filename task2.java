/*Ограничения по времени 1 сек
Огр по памяти 256мб
Егор с друзьями гуляли по городу N и нашли карту метро. В этом городе целых  веток метро, у каждой ветки свое расписание. Изучив расписание, они обнаружили, что по ветке  поезд начинает ходить в  секунду с начала дня, и каждый новый поезд начинает маршрут после предыдущего спустя  секунд. Теперь им захотелось научиться в некоторые моменты времени для ветки и времени определять, когда они увидят поезд после прихода на станцию.
Формат входных данных
В первой строке входных данных дано число   количество веток в городе .
В следующих  строках даны числа  первый момент, когда поезд с -й ветки приезжает на станцию, и промежуток между поездами
В следующей строке дано число  количество запросов
В следующих  строках даны числа  номер ветки и момент времени, когда друзья придут на станцию
Формат выходных данных
Для каждого запроса выведите в отдельной строке ответ на задачу.

Замечание
Для второго запроса ответ 8, так как поезд на станции будет в моменты 2, 5, 8, ... , и в первый раз они увидят поезд на 8-ой секунде.

ввод
3
0 1
2 3
1 4
5
1 2
2 6
3 6
2 5
3 8
вывод
2
8
9
5
9*/
import java.util.Scanner;

public class task2 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt(); // Количество веток
        int[] t = new int[n]; // Начальное время для каждой ветки
        int[] d = new int[n]; // Интервал для каждой ветки

        for (int i = 0; i < n; i++) {
            t[i] = scanner.nextInt();
            d[i] = scanner.nextInt();
        }

        int q = scanner.nextInt(); // Количество запросов
        for (int i = 0; i < q; i++) {
            int k = scanner.nextInt() - 1; // Номер ветки (0-based)
            int s = scanner.nextInt(); // Время прихода на станцию
            int ti = t[k];
            int di = d[k];

            if (s < ti) {
                System.out.println(ti);
            } else {
                int diff = s - ti;
                int m = diff / di;
                if (diff % di != 0) {
                    m++;
                }
                System.out.println(ti + m * di);
            }
        }
    }
}
